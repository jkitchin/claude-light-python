#+title: Claude Light python interface

See https://github.com/jkitchin/claude-light?tab=readme-ov-file#Usage for details about Claude Light. This library provides a Python interface to that instrument that is designed for use in Jupyter notebooks (although scripts work too).

This interface provides a variety of virtual interfaces to Claude Light. There is an introductory instrument with one input/output, one for one input / many outputs, many inputs / many outputs, and a general purpose instrument you can use to get all the data possible.

#+BEGIN_HTML
<a href="https://github.com/jkitchin/claude-light-python/actions/workflows/claude-light.yaml"><img src="https://github.com/jkitchin/claude-light-python/actions/workflows/claude-light.yaml/badge.svg"></a>
#+END_HTML

* Installation

This package is only available on GitHUB. You have two options:

#+BEGIN_SRC sh
pip install git+https://github.com/jkitchin/claude-light-python.git
#+END_SRC

or 

#+BEGIN_SRC sh
git clone https://github.com/jkitchin/claude-light-python.git
cd claude-light-python
pip install .
#+END_SRC


* Usage

** GreenMachine1

This is the introductory instrument. You can change one input value, the Green level, and you get one number back, the output of the 515nm channel.

#+BEGIN_SRC jupyter-python
from claude_light import GreenMachine1

gm = GreenMachine1()

# Background and G=0.2
gm(), gm(G=0.2)
#+END_SRC

#+RESULTS:
| 1428 | 13889 |

Here is an example of making 10 measurements to plot a histogram and measure some statistics.

#+BEGIN_SRC jupyter-python  
import numpy as np
import matplotlib.pyplot as plt

g = [gm(0.2) for i in range(10)]

plt.hist(g)

np.mean(g), np.std(g)
#+END_SRC

#+RESULTS:
:RESULTS:
| np.float64 | (13812.3) | np.float64 | (60.159870345604965) |
[[./.ob-jupyter/f64ec3a8c991280d5b0adc5f5a26974397e44739.png]]
:END:

** GreenMachine3

The next instrument still has one input, but you get three outputs which are the intensities at 630 nm (red), 515nm (greenish), and 445 nm (bluish). Each of these depends on the Green input setting to different degrees.

#+BEGIN_SRC jupyter-python  
from claude_light import GreenMachine3

gm3 = GreenMachine3()

# Background and G=0.2
gm3(), gm3(G=0.2)
#+END_SRC

#+RESULTS:
| 2777 |  1426 | 915 |
| 3044 | 13747 | 982 |

Here is an example of plotting the dependence of the three channels on the G input setting.

#+BEGIN_SRC jupyter-python  
G = np.linspace(0, 1, 5)
data = np.array([gm3(g) for g in G])
p = plt.plot(G, data)
for i, c in enumerate('rgb'):
    p[i].set_color(c)
    
plt.legend(('R', 'G', 'B'));
plt.xlabel('G in')
plt.ylabel('output')
#+END_SRC

#+RESULTS:
:RESULTS:
: Text(0, 0.5, 'output')
[[./.ob-jupyter/1016e096d1e8df40fcdf19e306ede10dcb7dc3c8.png]]
:END:

** CLRGB

This instrument has three inputs and three outputs. You can use this instrument to explore multivariate regression.

#+BEGIN_SRC jupyter-python
from claude_light import CLRGB

cl = CLRGB()
cl(), cl(R=0.1, G=0.2, B=0.3)
#+END_SRC

#+RESULTS:
| 2977 |  1585 |  1032 |
| 6607 | 14139 | 10113 |


** CLLight

This is the most general instrument. You set the RGB inputs, and you get all the outputs from the color sensor.

#+BEGIN_SRC jupyter-python
from claude_light import CLLight

cll = CLLight()
cll() # background
#+END_SRC

#+RESULTS:
| in | : | (0.0 0.0 0.0) | out | : | (415nm : 534 445nm : 1023 480nm : 1242 515nm : 1569 555nm : 2530 590nm : 2495 630nm : 2938 680nm : 1589 clear : 13958 nir : 9515) |

#+BEGIN_SRC jupyter-python  
cll(R=0.1, G=0.2, B=0.3)
#+END_SRC

#+RESULTS:
| in | : | (0.1 0.2 0.3) | out | : | (415nm : 1114 445nm : 10099 480nm : 6096 515nm : 14195 555nm : 4700 590nm : 4603 630nm : 6587 680nm : 2156 clear : 35438 nir : 10100) |

